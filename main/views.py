from django.shortcuts import render
from django.contrib import messages
from django.shortcuts import render, redirect
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.forms import AuthenticationForm
from django.core.mail import send_mail
from django.http import HttpResponse
from .forms import ContactForm


def login_view(request):
    if request.method == "POST":
        form = AuthenticationForm(data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            return redirect("home")  # –∏–ª–∏ –∫—É–¥–∞ –Ω—É–∂–Ω–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    else:
        form = AuthenticationForm()
    return render(request, "main/login.html", {"form": form})


def register(request):
    if request.method == "POST":
        form = UserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            return redirect("home")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    else:
        form = UserCreationForm()
    return render(request, "main/register.html", {"form": form})


def logout_view(request):
    logout(request)
    return redirect("login")


def home(request):
    return render(request, "main/home.html")


@login_required
def pipes(request):
    return render(request, "main/pipes.html")


def contact(request):
    if request.method == "POST":
        form = ContactForm(request.POST)
        if form.is_valid():
            subject = form.cleaned_data["subject"]
            message = form.cleaned_data["message"]
            sender = form.cleaned_data["sender"]

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
            try:
                send_mail(subject, message, sender, ["psychorazed@gmail.com"])
                return redirect("success")
            except Exception as e:
                print(f"Error sending email: {e}")
        else:
            print(f"Form is not valid: {form.errors}")
    else:
        form = ContactForm()

    return render(request, "main/contact.html", {"form": form})


def success_view(request):
    return render(request, "success.html")


@login_required
def about(request):
    return render(request, "main/about.html")


from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import json
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
latest_data = {
    "humidity_data": [],
    "servo_status": {
        "servo1": "–û–∂–∏–¥–∞–Ω–∏–µ",
        "servo2": "–û–∂–∏–¥–∞–Ω–∏–µ",
        "servo3": "–û–∂–∏–¥–∞–Ω–∏–µ",
        "servo4": "–û–∂–∏–¥–∞–Ω–∏–µ",
        "servo5": "–û–∂–∏–¥–∞–Ω–∏–µ",
        "servo6": "–û–∂–∏–¥–∞–Ω–∏–µ",
    },
}


@csrf_exempt
def api_data(request):
    global latest_data

    if request.method == "POST":
        try:
            data = json.loads(request.body)

            # –û–∂–∏–¥–∞–µ—Ç—Å—è humidity: —á–∏—Å–ª–æ, servos: —Å–ø–∏—Å–æ–∫ –∏–∑ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (True/False)
            humidity = data.get("humidity")
            servos = data.get("servos")

            if humidity is None or servos is None or len(servos) != 6:
                return JsonResponse({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö"}, status=400)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤–æ –≤–ª–∞–∂–Ω–æ—Å—Ç—å
            now = datetime.now().strftime("%H:%M:%S")
            pipe_num = len(latest_data["humidity_data"]) % 6 + 1
            latest_data["humidity_data"].append(
                {"pipe": pipe_num, "humidity": humidity, "time": now}
            )

            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–ø–∏—Å–µ–π
            latest_data["humidity_data"] = latest_data["humidity_data"][-10:]

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–µ—Ä–≤–æ–ø—Ä–∏–≤–æ–¥–æ–≤
            for i in range(6):
                status = "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" if servos[i] else "–û–∂–∏–¥–∞–Ω–∏–µ"
                latest_data["servo_status"][f"servo{i+1}"] = status

            return JsonResponse({"status": "ok"})

        except Exception as e:
            return JsonResponse({"error": str(e)}, status=500)

    elif request.method == "GET":
        return JsonResponse(latest_data)

    else:
        return JsonResponse({"error": "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"}, status=405)


from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_http_methods
import json

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
received_data = []


@csrf_exempt
@require_http_methods(["POST"])
def receive_data(request):
    try:
        data = json.loads(request.body)
        received_data.append(data)
        return JsonResponse({"status": "ok"})
    except json.JSONDecodeError:
        return JsonResponse({"status": "invalid json"}, status=400)


# üëâ –≠–¢–ê –§–£–ù–ö–¶–ò–Ø –î–õ–Ø pipes.js (GET-–∑–∞–ø—Ä–æ—Å–æ–≤)
@require_http_methods(["GET"])
def get_data(request):
    return JsonResponse({"pipes": received_data})
